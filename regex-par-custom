library(tidyverse)
library(stringr)
library(stringi)
library(purrr)
library(data.table)
library(doParallel)


# SET UP PARALLEL
#----------------------------
# detect cores in machine (mine has 4 cores)
# initialise cluster of threads
# register the cluster
nThreads <- detectCores()
cl <- makeCluster(nThreads)
registerDoParallel(cl, cores=nThreads)
#----------------------------




# CUSTOM FUNCTIONS

# 1. --------------------------
# function to get all errors without last CAA

ignore_CAA <- function(seq) {
  comas <- str_replace_all(seq, "(CAG)+", ",")
  final <- str_replace_all(comas, "^,|,$", "")
  
  match <- str_subset(seq, "CAA((?:(?!CAG).)*)CAG$")
  
  if (length(match) > 0 && !is.na(match)) {
    vec <- str_split(final, ",")[[1]]
    if ("CAA" %in% vec) {
      last_caa_index <- tail(which(vec == "CAA"), 1)
      vec <- vec[-last_caa_index]
    }
    return(paste(vec, collapse = ","))
  } else {
    return(final)
  }
}

#--------------------------

#======================

# 2. --------------------------
# function to not error CAA before last CAG, leaving room for possible seq error
# create logical vector, length of number of CAG
# create chr vector match that matches the initial string if regex TRUE or is empty vector if regex FALSE
# Expl to regex: find CAA before last CAG, there can be any number of characters in between, but should not contain a single CAG
# if match vector is not empty, add one more TRUE to triplets, which would make up for "1 additional CAG"
# Used only for counting CAG total length and purity

leave_last_CAA <- function(seq){
  triplets <- rep(TRUE, str_count(seq, "CAG")) 
  match <- str_subset(seq, "CAA((?:(?!CAG).)*)CAG$")
  
  if (!is_empty(match)) {
    triplets <- append(triplets, TRUE)
  }
  return(sum(triplets) * 3)
}
#--------------------------



message("Start time: ", now())

# read a data.table, with only FIELDS column to modify it
df <- fread("FAZ10795_pass_barcode20_ac6d2943_c09bf8d7.detail2.txt", nrows = 2056720,
            select = "FIELDS")

message("Read df: ", now())


# select only second seq with CAG; work only with CAG_repeat; filter out NA
# count CAGs, length; visualize CAG in [CAG] (delete to optimize for scalability)
extracted <- df %>%
  mutate(CAG_repeat = str_match(FIELDS, "^[^,]*,([^,]*),")[,2]) %>% 
  select(CAG_repeat) %>%
  filter(!is.na(CAG_repeat), CAG_repeat != "NA") %>% 
  
  mutate(CAG_count = str_count(CAG_repeat, "CAG"),
         total_length = str_length(CAG_repeat),
         highlighted_string = str_replace_all(CAG_repeat, "CAG", "[CAG]"))

message("Calculated count/length/highlighted: ", now())

nrow(extracted)

CAG_repeat <- extracted$CAG_repeat

# export CAG_repeat and function to the cluster + used library in function
clusterExport(cl, varlist = c("CAG_repeat", "ignore_CAA"))
clusterEvalQ(cl, {library(stringr)
  library(purrr)})






message("Start indexing_errors: ", time_begin_errors <- now())
#View(extracted)
# add column with errors from get_sequence_error_delimeter function
indexing_errors <- parLapply(cl, CAG_repeat, ignore_CAA)
indexing_errors <- unlist(indexing_errors)  # convert from list to vector

extracted$indexing_errors <- indexing_errors


message("Finished indexing_errors: ", time_end_errors <- now())
nrow(extracted)
message("Total error search time: ", time_end_errors-time_begin_errors)

stopCluster(cl)

View(extracted)


message("Start eliminate last CAA + purity: ", time_begin_CAA <- now())

# use leave_last_CAA function to calculate correct purity and ignore last CAA before last CAG
extracted <- extracted %>%
  mutate(
    CAG_length = map_int(CAG_repeat, leave_last_CAA),
    purity = CAG_length / total_length
  )

message("Finished eliminate last CAA + purity: ", time_end_CAA <- now())
message("Total CAA + purity time: ", time_end_CAA-time_begin_CAA)



# SINGLE VECTOR ERRORS --------------------

# create single vector from indexing_errors
# create a summary of interruptions table
# get lengths of each error for distribution of lengths

message("Start distrib error lengths: ", time_begin_distr <- now())

single_vector_errors <- unlist(str_split(extracted$indexing_errors, ","))

chunk_freqs <- table(single_vector_errors)
error_summary <- data.frame(
  sequence = unique(single_vector_errors),
  frequency = as.integer(chunk_freqs[unique(single_vector_errors)])
)

error_summary <- error_summary %>% arrange(desc(frequency))

length_distrib_error <- str_length(single_vector_errors)
df_distrib_error_length <- data.frame(length = length_distrib_error)

message("Finish distrib error lengths: ", time_end_distr <- now())
message("Total distribution time: ", time_end_distr-time_begin_distr)
#--------------------





# DIVIDE CHUNKS % 3 --------------------

# divide each chunk into triplets if it is multiple of 3
# create a table with desc sorted most common triplets

triplet_errors <- function(seq) {
  if (nchar(seq) %% 3 == 0){
    
    stri_extract_all_regex(seq, ".{1,3}")[[1]]
  }
}

message("Start extracting triplets: ", time_b_extract <- now())
triplets_within_interruptions <- single_vector_errors %>%             
  map(triplet_errors) %>%        
  unlist(use.names = FALSE)
message("Finished extracting triplets: ", time_e_extract <- now())
message("Total time extracting: ", time_e_extract-time_b_extract)


extracted_triplets <- table(triplets_within_interruptions)
triplets_summary <- data.frame(
  triplet = unique(triplets_within_interruptions),
  Freq = as.integer(extracted_triplets[unique(triplets_within_interruptions)])
)

triplets_summary <- triplets_summary %>% arrange(desc(Freq))
triplets_summary <- triplets_summary %>% 
  filter(!is.na(triplet))


# CGG is too large...
# drop CGG and create a new table
without_CGG <- triplets_summary[triplets_summary$Freq!=max(triplets_summary$Freq),]
#--------------------



# GRAPH TRIPLETS ----------------------

# graph distribution of triplets
library(ggplot2)

ggplot(triplets_summary, aes(x = reorder(triplet, -Freq), y = Freq)) +
  geom_col(color="black", fill="steelblue") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(
    title = "Triplet Frequency in 3 bp-Multiple Interruptions",
    x = "Triplet",
    y = "# of occurences"
  )  
#--------------------




# GRAPH TRIPLETS (NO CGG) ----------------------

# graph distribution of triplets (drop CGG)
library(ggplot2)

ggplot(without_CGG, aes(x = reorder(triplet, -Freq), y = Freq)) +
  geom_col(color="black", fill="steelblue") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(
    title = "Triplet Frequency in 3 bp-Multiple Interruptions (drop CGG)",
    x = "Triplet (drop CGG)",
    y = "# of occurences"
  )  
#----------------------




# GRAPH DISTRIBUTION OF LENGTHS ----------------------
# graph distribution of chunk lengths
library(ggplot2)

ggplot(df_distrib_error_length, aes(x = length)) +
  geom_histogram(binwidth = 1, color="black", fill="steelblue") +
  labs(
    title = "Distribution of Interruption Lengths",
    x = "Interruption Length (# of bases)",
    y = "# of interruptions"
  ) +
  xlim(0, 40) 
#---------------------
View(triplets_summary)
View(without_CGG)
View(df_distrib_error_length)
View(error_summary)
