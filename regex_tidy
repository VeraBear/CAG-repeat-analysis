library(readr)
library(tidyverse)
library(stringr)
library(future)
library(furrr)
library(purrr)
library(data.table)

# CUSTOM FUNCTIONS

# 1. --------------------------
# function searching for errors with delimeters
get_sequence_error_delimeter <- function(seq){
  comas <- str_replace_all(seq, "(CAG)+", ",")
  final <- str_replace_all(comas, "^,|,$", "")
  return(final)
}
#--------------------------

#======================

# 2. --------------------------
# function to not error CAA before last CAG, leaving room for possible seq error
# create logical vector, length of number of CAG
# create chr vector match that matches the initial string if regex TRUE or is empty vector if regex FALSE
# Expl to regex: find CAA before last CAG, there can be any number of characters in between, but should not contain a single CAG
# if match vector is not empty, add one more TRUE to triplets, which would make up for "1 additional CAG"
# Used only for counting CAG total length and purity

leave_last_CAA <- function(seq){
  triplets <- rep(TRUE, str_count(seq, "CAG")) 
  match <- str_subset(seq, "CAA((?:(?!CAG).)*)CAG$")
  
  if (!is_empty(match)) {
    triplets <- append(triplets, TRUE)
  }
  return(sum(triplets) * 3)
}
#--------------------------



message("Start time: ", now())

# read a data.table, with only FIELDS column to modify it
df <- fread("FAZ10795_pass_barcode20_ac6d2943_c09bf8d7.detail2.txt", nrows = 10000,
            select = "FIELDS")

message("Read df: ", now())


# select only second seq with CAG; work only with CAG_repeat; filter out NA
# count CAGs, length; visualize CAG in [CAG] (delete to optimize for scalability)
extracted <- df %>%
  mutate(CAG_repeat = str_match(FIELDS, "^[^,]*,([^,]*),")[,2]) %>% 
  select(CAG_repeat) %>%
  filter(!is.na(CAG_repeat), CAG_repeat != "NA") %>% 
  
  mutate(CAG_count = str_count(CAG_repeat, "CAG"),
         total_length = str_length(CAG_repeat),
         highlighted_string = str_replace_all(CAG_repeat, "CAG", "[CAG]"))



message("Calculated count/length/highlighted: ", now())

message("Start indexing_errors: ", now())
View(extracted)
# add column with errors from get_sequence_error_delimeter function
extracted <- extracted %>% 
  mutate(
    indexing_errors <- future_map_chr(CAG_repeat, get_sequence_error_delimeter)
  )

message("Finished indexing_errors: ", now())


# use leave_last_CAA function to calculate correct purity and ignore last CAA before last CAG
extracted <- extracted %>%
  mutate(
    CAG_length = map_int(CAG_repeat, leave_last_CAA),
    purity = CAG_length / total_length
  )


#--------------------
# create single vector from indexing_errors
# get lengths of each error for distribution of lengths

single_vector_errors <- unlist(str_split(extracted$indexing_errors, ","))
length_distrib_error <- str_length(single_vector_errors)
df_distrib_error_length <- data.frame(length = length_distrib_error)
#--------------------


library(ggplot2)

ggplot(df_distrib_error_length, aes(x = length)) +
  geom_histogram(binwidth = 1) +
  labs(
    title = "Distribution of Chunk Lengths",
    x = "Chunk Length (# of bases)",
    y = "Freq"
  ) +
  scale_x_continuous(breaks = seq(0, 60, by = 10))+ # NOTE FOR SELF: discrete or continuous?
  scale_y_continuous(breaks = seq(0, 10000, by = 100))+
  xlim(0, 60) +
  ylim(0, 10000) +
  theme_minimal()
